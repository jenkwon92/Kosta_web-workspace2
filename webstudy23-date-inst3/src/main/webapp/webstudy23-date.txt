**Servlet 기본 개념**

HTTP : HyperText Transfer Protocol 
WAS : Web Application Server 
		 Web Server + Web Container 
		 Web Server -> HTTP 에 의거해 HTML을 서비스하는 서버 
		 Web Container -> Servlet/JSP 실행환경을 제공 
		 
WAS 제품 중 Apache-Tomcat을 사용한다 

Web 환경 설정 
0. WAS 설치 
1. 포트설정 : apache-tomcat/conf/server.xml 에서 port를 변경 ( 이유는 오라클 포트와 중복 방지를 위해 ) 
2. 한글처리 ( get 방식 ) : URIEncoding="utf-8" 설정 추가 
3. 자동리로드 : apache-tomcat/conf/context.xml에서 reloadable="true" 설정 추가 
                  java class ( Servlet 포함해서 ) 변경시 자동 리로딩하게 해서 개발 편의성 증대  

Servlet : Java Web Programming 기술 
		   java class로 표현 
		   Model2 Architecture( MVC ) 에서 Controller의 역할을 한다 	
		  ( Spring Framework의 웹기술 SpringMVC의 FrontController 인 DispatcherServlet도 서블릿이다 ) 
		  
JSP : Java Server Page 
		동적인 웹페이지 생성을 위한 기술 
	    HTML 구조 상에서 JSP tag (java code) 를 삽입 -> View 를 구현하는 측면에서 장점 
	    Model2 Architecture( MVC ) 에서 View의 역할을 한다 
	    	
참고 )   MVC Design Pattern 
		 Model : 비즈니스 로직과 데이터 액세스 로직을 담당 
		 		  Java Beans ( or Java Component ) : Service , DAO , DTO , VO ... 
		 View : 클라이언트에게 동적인 화면을 제공 : JSP 
		 Controller : 제어자의 역할 , 클라이언트의 요청을 분석 , 그에 대한 Model 연동 후 
		 			   적절한 View를 선택해 응답하게 하는 역할 
		 
		 JSP is a Servlet -> JSP 는 Web Container에 의해 java class로 생성되어 컴파일, 실행되고 
		 						   이 자바 클래스는 Servlet Interface의 하위 , HttpServlet class의 자식이다 
	
	**************************************************************************
	webstudy06-servlet-basic
	
	Deployment Descriptor ( DD ) :   WEB-INF/web.xml -> 웹어플리케이션의 설정 정보를 기술   
	배포          기술서                  WAS 는 웹어플리케이션 실행 첫 시점에 DD(web.xml) 정보를 로드하여 
										   서비스에 반영한다         	 
	web.xml 의 서블릿 설정 부분 
 <servlet>
  	<servlet-name>basic</servlet-name><!--  서블릿 별칭    -->
  	<servlet-class>step1.BasicServlet</servlet-class><!-- 팩키지명.클래스명   -->
  </servlet>
  <servlet-mapping>
  	<servlet-name>basic</servlet-name><!-- 위 서블릿을 지칭   -->
  	<url-pattern>/bs</url-pattern><!-- 클라이언트가 해당 서블릿을 실행시켜 서비스 받기 위한 url   -->
  </servlet-mapping>	 
		 
  Http Request Method ( 요청 방식 ) 
  1. get 방식  : 정보 조회용 , url 상에 전송 정보가 노출됨 , 전송 데이터 용량에 제한 
  2. post 방식 : 정보 전달용(주로 서버 자원의 데이터 변경시 사용) , url 상에 전송 정보가 노출되지 않고 
                  http request body 부분에 저장되어 전송(별도의 한글처리가 필요) , 전송 데이터 용량 제한 x 
  					
		 
	
  - client ( html form ) 과 server ( servlet ) 연동 
   	 
   	 client 																									Server
   	 <form action="url pattern"  method="get">															
   	 <input type="text" name="food">																	   url pattern에 해당하는 서블릿의 doGet 메서드가 실행 
   	 <input type="submit" value="주문">																   클라이언트가 보낸 정보를 입력받기 위해 	
   	 </form>	 																							   request.getParameter(name) 즉 request.getParameter("food") 과 같이 입력받는다
	  submit 을 누르면 아래와 같은 형식으로 전송된다 	 
	  http://localhost:8888/webstudy06-servlet-basic/url-pattern?name=value&name=value	 
		 		  
*******************************************************************************************
webstudy07-servlet-LifeCycle

Web Architecture
															 WAS (Web Server + Web Container)              Database 
client - browser 												
http 프로토콜에 의거해 									 Http 프로토콜에 의거해 
서버로 요청 ( Http Request 전달 ) 						 Http Request 를 분석 
															 적절한 Http Response 로 응답 
Http Response 메세지를 입력받아 
html , javascript , css 를 해석해서 
브라우저 상에서 표현 

- 서블릿 계층구조 ( Servlet Hierarchy ) : servlet-hierarchy.jpg 참조 
<<interface>>
Servlet : 서블릿 인터페이스는 모든 서블릿(jsp 포함)이 implements 해야 하는 메서드(abstract method)를 정의한 인터페이스
		   모든 서블릿과 jsp 의 최상위 인터페이스이다. 
		   
<<abstract>>
GenericServlet : Servlet interface를 implements 하는 abstract class 
                    프로토콜에 독립적인 abstract class 
				    일반적으로 서블릿(서버프로그램)이 가져야 하는 메서드를 구현해 자식 클래스에게 물려주고 
				    자식 차원에서 구현해야 하는 abstract method ( service 메서드 ) 를 정의하고 있다 
<<abstract>>
HttpServlet :  GenericServlet을 상속받는 클래스 	  
				  Http Protocol에 특화된 서비스를 구현하는 데 유용한 기능을 제공한다 
				  일반적으로 web application 개발시에는 이 클래스를 상속받아 개발한다 

Servlet Interface ( Servlet , ServletRequest, ServletResponse, HttpSession .. ) 들을 중심으로
Servlet API ( Application Programming Interface ) 를 정의하고 
실제 구현 클래스 ( 구현체 : implementation ) 들은 개별 WAS 제품군에서 정의한다 
이러한 설계의 장점은 다형성 적용에 있다 
일반 웹어플리케이션 개발 진영에서는 Servlet API 즉 인터페이스를 보고 개발하고 
실제 동작은 개별 WAS 제품군에서 구현한 클래스가 동작하는 방식으로 
WAS 가 변경되더라도 특정한 프로그램의 수정없이 배포되어 실행될 수 있다는 장점이 있다 
-> Web Application 과 개별 WAS 제품군과의 결합도를 낮추어 유지보수성을 향상시킬 수 있다는 의미 

- Servlet LifeCycle 
  Servlet/JSP 계층구조의 최상위 인터페이스 Servlet 의 LifeCycle abstract method 
  init() , service() , destroy() 
  
  서블릿의 라이프 사이클을 관리하는 주체는 WAS( Web Container ) 이다 
  -> web.xml(Deployment Descriptor:웹어플리케이션 설정정보)를 로딩하고 서블릿 객체를 생성하고
      init() , service() -> doGet() or doPost() , destroy() 를 실행하는 주체는 Web Container(Servlet Container)이다 
      
      init() : 해당 서블릿의 초기화 작업 , 서블릿 당 한번 실행 
      service() : 해당 서블릿이 클라이언트에게 서비스 하기 위해 실행 ( 내부적으로 doGet() or doPost() 로 연결 ) 
      			   클라이언트 요청시마다 매번 실행 
      destroy() : 해당 서블릿이 서비스 종료되기 직전에 호출 ( WAS를 중지할 때 실행 ) 
  ----------------------------------------------------------------------------------------
  											WAS(Web Server + Web Container)
  											
  client browser --request-->			is loaded? -- no --> class loading
  				   <--response--				|						|	
  				   								| 					  객체 생성 ( 서블릿 생성 ) 
												|						|  											   
  											   	|					  init(ServletConfig) 호출 	
  											   	|						|
  											  yes ------>	   service(request,response) --> doGet() or doPost() 	
  											  
  											  						destroy() : 해당 서블릿이 서비스 종료 ( WAS 종료시 ) 되기 직전에 호출 	
  											    
      
           
  
  ex) LifeCycleServlet 에 클라이언트가 10명이 접속해서 서비스를 받았다 
   
   LifeCycleServlet 객체는 몇개 생성? 1개 
   init() 몇번 실행? 1번 
   service() 몇번 실행? 10번 
   destroy() 몇번 실행? 서비스 종료( was 중지) 직전 1번 실행 

 - ServletConfig 
    개별 서블릿의 설정 정보를 저장하는 객체 
    서블릿 당 하나 생성 
    Web Container(Servlet Container) 에 의해 init 호출시점에 ServletConfig 객체가 주입된다 
    초기 파라미터 ( init-param ) , ServletContext 객체 주소값 등이 ServletConfig에 저장되어 전달된다 
    ex) 사원(서블릿) 당 사원증(ServletConfig) 
    
  - ServletContext
    웹어플리케이션 내의 모든 서블릿과 jsp가 공유하는 자원 ( 필요시 정보를 set/get 할 수 있다 ) 
    웹어플리케이션 당 하나 생성   
    웹어플리케이션 시작 시점에 생성되고 종료 직전에 소멸된다 
    ex) 회사(web application) 사내 인트라넷(ServletContext)  
    
     - web.xml 의 load-on-startup 은 WAS 실행 시점에 해당 서블릿 객체 생성 및 init 실행해서
   미리 초기화 작업을 해두기 위한 코드이다. 
   이 것을 명시하는 이유는 최초 해당 서블릿을 서비스 받기 위해 접속하는 클라이언트에게
   신속하게 서비스하기 위해서이다  
 
  <servlet>
    <description></description>
    <display-name>LifeCycleServlet</display-name>
    <servlet-name>LifeCycleServlet</servlet-name>
    <servlet-class>step1.LifeCycleServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
 
*************************************************************
webstudy08-ServletConfig-ServletContext

- ServletContextListener : 웹 어플리케이션 LifeCycle event 발생시 ( 웹어플리케이션 시작 이벤트 , 종료 이벤트 ) 실행되는 메서드를 가진 Interface 
								웹 어플리케이션 차원에서 시작 시점에 필요한 초기화 작업과 종료 시점에 필요한 백업 , 로깅 작업을 처리하는 데 용이하다 
							    contextInitialized(event) : 웹어플리케이션 시작 시점에 호출되어 실행되는 메서드 
							    contextDestroyed(event) : 웹어플리케이션 종료 직전에 호출되어 실행되는 메서드 

**************************************************************
webstudy09-servlet-Annotation-Config

- Servlet Annotation : 서블릿 3.0 이상에서 지원하는 기술 
   @WebServlet(url-pattern) -> 이 어노테이션을 서블릿 상단부에 명시하면 기존 web.xml 의 url-pattern 설정과 동일한 효과를 가짐
   
   어노테이션 ( @ ) : 의미있는 주석 , 컴파일 및 런타임 시점에 시스템에 영향을 주기 위한 의미있는 주석이다 
   
   설정 정보 ( 메타 데이터 ) 
   1) XML : 소스코드와 설정의 분리 
   2) Annotation : 소스코드 상에 설정정보를 기술 
   일반적으로 전역적인 설정은 xml에 기술 , 설계시 확정되는 부분은 Annotation으로 설정 ( 선택적 ) 
   
//어노테이션 기반 서블릿 설정의 예  ( xml 기반 서블릿 설정 webstudy07 의 step1 에 있다 ) 
//웹어플리케이션 실행시점에 미리 해당 서블릿을 초기화 하도록 하는 web.xml 의 load-on-startup 설정을
//어노테이션 방식으로 설정해본다 
@WebServlet(urlPatterns = "/LifeCycleServlet",loadOnStartup = 1)
public class LifeCycleServlet extends HttpServlet {

****************************************************************************
webstudy10-Session-Cookie

- Session 과 Cookie 

HTTP 특성 : stateless ( 사용자 상태 정보를 유지하지 않는다 ) 

세션 관리 : 사용자 정보를 일정 조건동안 유지 

Cookie : 사용자 상태 정보를 클라이언트 측에 저장 
		  저장 용량의 제한 ( 4kb ) 
		  데이터 타입은 문자열로 한정 
		  Cookie 유효 시간을 별도로 설정하지 않으면 브라우저 실행시에만 유효 
		  Cookie 유효 시간을 설정하면 그 유효 시간 내에서만 Cookie를 사용할 수 있다 
		 
		 
1. 서버측에서 쿠키를 생성해서 클라이언트에게 전달하여 클라이언트측에 쿠키가 저장 
 		  			
client(browser) --request--> SetCookieServlet
								   Cookie 생성 ( new Cookie(name,value) ) 
								   cookie.setMaxAge(30); //30초 동안 해당 쿠키가 유효하도록 설정 
								   response.addCookie(cookie); //클라이언트 측으로 쿠키를 전송 		  
		           <--response--
		           
2. 클라이언트가 접속하면 서버측에서 클라이언트의 쿠키를 확인해서 특정쿠키(name이 time인 )의 value를 얻어와 화면 출력		  

client(browser) --request--> GetCookieServlet
								   request.getCookies() : Cookie[] // client로부터 쿠키 정보를 배열로 반환 										
								   Cookie 의 getName() 과 getValue() 를 이용해 특정 쿠키의 값을 확인 
		  		  <--response--	
		  

HttpSession( or Session ) : 사용자 상태 정보를 서버 측에 저장 
								저장 용량 및 데이터 타입의 제한은 없다 
								로그인 , 로그아웃 시에 세션이 이용된다 
								WAS 에 세션 유지 시간이 별도로 설정되어 있다
								( apache-tomcat 의 경우  apache-tomcat/conf/web.xml 에 30 분으로 세션 유효 시간이 설정 -> 변경 가능 ) 
								
								세션유지기간 ( ex - 로그인 유지 기간 ) 
								1) 지정한 유효시간( tomcat 30분 ) 내에 새로운 요청이 없으면 세션이 만료 
								2) 브라우저를 종료 
								3) 로그아웃을 실행할 때 
								
								
								HttpSession 관련 주요 메서드 
								HttpServletRequest 의 getSession() 메서드 : 기존 세션이 존재하면 기존 세션을 반환, 없으면 새로 생성해서 반환  (request.getSession(true) 와 동일)
								HttpServletRequest 의 getSession(false) 메서드 : 기존 세션이 존재하면 기존 세션을 반환, 없으면 null 을 반환 
								
								HttpSession 의 setAttribute(name,value) : 세션에 String 타입의 name과 Object 타입의 value를 할당해서 저장 
								HttpSession 의 getAttribute(name) : 세션에 저장된 attribute 정보를 name으로 검색해서 value 를 반환 
								
								HttpSession 의 invalidate() : 세션을 무효화시킨다 ( 로그아웃시 사용 ) 
								
								 
		=========================================
		로그인 과정에서 세션처리 흐름 
		
		client browser -- request --> if(회원 아이디, 패스워드가 일치하면)
											HttpSession session=request.getSession();//기존 세션이 있으면 기존 세션 반환, 없으면 새로 생성해서 반환 
											session.setAttribute(name,value);//인증정보(회원객체)를 할당						
											응답시 클라이언트에 jsessionid cookie(name:JSESSIONID , value:WAS에서 생성한 세션 아이디)를 전달한다
											서버측에는 세션 생성시 jsessionid에 매핑된 세션객체가 존재하는 상태 
						  <--response--
		
		=========================================				  					
		로그인 후 다시 접속했을 때 세션처리 흐름 
		
		client browser -- request --> HttpSession session=request.getSession(false);//세션이 있으면 반환, 없으면 null리턴 
											위 코드의 getSession(false) 는 내부적으로 접속한 클라이언트(브라우저)가 
											WAS가 발급한 JSESSIONID 쿠키 정보가 있는 지 확인해서 있으면 WAS에 저장한 
											JSESSIONID에 연결된 세션 객체를 반환하고 없으면 null 을 반환  											
											//클라이언트가 로그인 했는 지 여부를 판단할때는 세션 유무와 함께 인증정보 유무를 함께 판단한다
											if(session!=null&&session.getAttribute("mvo")!=null){
												로그인한 사용자 
											}
																				 
************************************************************************
webstudy11-jsp-basic

JSP : Java Server Page 
	   동적인 웹페이지를 위한 기술 	
	   서블릿과는 다르게 HTML 상에서 자바코드( or jsp tag ) 를 삽입하는 형태로 개발 
	   JSP는 WAS(Web Container)에 의해 java 로 생성되고 컴파일되어 실행된다 
	   ( 생성된 java class는 HttpServlet의 자식 클래스이다. JSP is a Servlet ) 
	   생성된 자바 파일은 tomcat/work 디렉토리에 저장된다 
	   
Model2 Architecture MVC 에서는 Model 은 java beans , View 는 JSP , Controller 는 Servlet 이 담당한다 	   

JSP 기본 문법 
1) jsp 주석 <%--    --%>  참고) html 주석 <!--    --> 
2) scriptlet 스크립틀릿 <%  java code %>  service 메서드 내에 자바 코드로 삽입 
3) expression <%=  %>  out.print() 의 역할 , 화면 출력용 
4) declaration 선언  <%!   %>  멤버 변수 , 메서드 정의시 사용 
5) directive 지시자   <%@   %>  jsp 문서 정보를 웹컨테이너에 전달  , 한글처리방식 , 문서타입 , import , errorPage 등을 기술


JSP LifeCycle - Servlet과 동일 ( 차이점은  jsp 를 이용해  .java 를 생성하고 .class 로 컴파일해서 실행 : tomcat/work 디렉토리에 생성 ) 

										WAS( Web Container ) 
										
client browser --request-- 		is loaded? ----no----> .jsp 를 이용해 .java 로 생성하고 .class로 컴파일 후 class loading 
											|							|
											|							|
											| yes 						객체생성 
											|							|
											|						    init() -- jspInit() 	
											|							|
											|------------>		service() -- jspService() 
																		
																		
											destroy()--jspDestroy()   -> WAS 종료직전에 호출 

****************************************************************************************
webstudy12-form

- Query String ( 쿼리 스트링 ) : 웹프로그램에 입력데이터를 전달하는 방법 

http://localhost:8888/webstudy12-form2/step2-2-querystring-action.jsp?no=2&food=갈비

URL  ? Query String ( name=value&name=value ) 

? : URL 주소와 Query String을 구분  
& : 여러 쌍의 데이터를 전달할 때 사용   

javascript event 처리 관련 
onclick : form 요소에 마우스 클릭했을 때 발생하는 이벤트 
onchange : form 요소의 value 가 변경되었을 때 발생하는 이벤트 
onsubmit : form 전송시 발생하는 이벤트 
onkeyup : 키보드의 키를 눌렀다가 땔 때 발생하는 이벤트 

 client side script                               server side script 
 browser 					--request-->
 												   Servlet/JSP (동적으로 웹문서(html/css/javascript)를 생성해서 응답 ) 			
 html / css / javascript <--response-- 


ex)													alert("<%=name%>님 어린이 영화..");
								  <------		jsp는 서버측에서 실행되어 문자열로 응답한다 
	  alert("이강인님 어린이 영화..");
      위 코드를 서버측에서 전달받아 브라우저가 해석해서
      화면에 반영한다 

****************************************************************
webstudy13-model1

초기 웹 개발방식 :  jsp-db.jsp 에서 확인 
JSP  <---->  Database 

-----------------------------

Model1 Architecture : index.jsp 에서 확인 

참고) Software Architecture : 소프트웨어 아키텍쳐(or 구조)는 소프트웨어 구성 요소들 사이의 유기적 관계를 표현 , 
								   소프트웨어 설계와 업그레이드를 통제하는 지침과 원칙 

client <---> JSP <---> Java Beans(or Component) <---> Database 

JSP : Client의 요청을 분석 , Java Beans와 연동, 적절한 결과를 Client에게 응답 
Java Beans : Java Class(or Object) 들로 구성된 컴포넌트를 말한다 
				Java Beans는 DB 연동 로직과 Business 로직을 수행한다 
				(참고 : 컴포넌트란 객체들이 상호 연동되어 독립적 기능 단위를 구성할 때 이를 컴포넌트라고 한다 ) 

***********************************************************
webstudy14-model2-mvc-basic

Model 2 Architecture MVC Design Pattern 
- Model 2 설계방식의 근간을 이루는 Design Pattern 이 MVC 
- 통상적으로 Model2 or MVC or Web MVC or Model2 MVC 라고 불린다 

			 WAS(Web Container)
client --- > Controller ( Servlet ) <--> Model ( Java Beans ) <--> Database 
						|
					    | forward or redirect 방식
					    |	
		<---	 View ( JSP ) 	

	
	Model2 MVC or Web MVC : web application 설계방식 ( or Architecture or 구조) 으로서 
									 Model 과 View 와 Controller 영역으로 분리해서 설계 구현하는 것을 말한다 
									
									Model : Java Beans( or Java Component ) - DAO , Service , VO , DTO 등 
											  비즈니스 로직과 데이터 액세스 로직을 정의 
											  
									View :  JSP 가 담당 
											 클라이언트에게 동적인 웹페이지를 제공 
											 
									Controller : Servlet이 담당 	 
												  웹 어플리케이션의 제어자 역할 
											      client의 요청을 분석 
											      Model과 연동 
											      적절한 이동방식(forward or redirect)으로
											      View를 선택해서 클라이언트에게 응답하게 한다 
				 
				 
***************************************************************************
 webstudy15-forward-redirect 
 				 
 - Controller(Servlet) 에서 View(JSP) 로 이동하는 방식 
 	1. forward 방식 : request와 response 가 유지되면서 이동되는 방식, 재요청시 기존 동작 반복 
 	
 	   request와 response 가 유지되면서 이동되는 방식 
 	   WAS ( Web Container ) 상에서 이동되고 클라이언트 측은 이동여부를 모른다 
 	   즉 서버상에서 이동되므로 클라이언트 브라우저 상의 url은 변경되지 않는다 
 	   클라이언트가 재요청을 할 경우에는 기존 동작이 반복된다 
 	   필요시 Model 과의 연동 결과를 request 객체에 정보를 할당 ( request.setAttribute(name,value) ) 해서 
 	   View에서 정보를 이용(request.getAttribute(name)) 해서 클라이언트에게 응답하게 한다 
 	   
 	   ex) request.getRequestDispatcher(view url).forward(request,response); 
 	  
   2.  redirect 방식 : 기존 request와 response 가 유지되지 않는다. 재요청시 기존 동작을 반복하지 않는다  
   						
                          이동시 client 에게 url을 전달해서 client가 다시 이동하게 하는 방식 
   						  기존 request와 response가 유지되지 않는다
   						  client가 지정한 url로 다시 이동하므로 새로운 request와 response 생성된다  	
   						  
		ex) response.sendRedirect(view url); 

*****************************************************************
webstudy16-mvc-singleton

- Singleton Design Pattern : 시스템 상에서 단 한번 객체를 생성해서 공유하여 여러 곳에서 사용하고자 할 때 적용하는 설계 패턴 
								 (참고 - spring framework에서는 기본 객체 운용방식이 singleton 방식이다 ) 
   
   적용 방안 
   1) private 생성자: constructor(생성자)에 private access modifier(접근제어자)를 명시해 외부(다른 user class)에서 객체 생성하는 것을 막는다 
   2) private static 멤버변수로 자신의 객체를 생성 : private static 멤버 변수차원에서 클래스 로딩 시점에 자신의 생성자를 이용해 
   														 단 한번 객체를 생성하고  meta space 영역에 주소값을 저장
   3) public static 메서드로 외부에 공유 :  public static 메서드로 외부에서 사용하는 측에 한번 생성하여 meta space , 즉 static 변수에 저장된 객체의 주소값을 반환하여
   												 사용하게 한다  
   예) 
    public class CompanyDAO {
	// static 변수로 단 한번 객체 생성 ( meta space에 현 객체 주소값을 저장 ) 
	private static CompanyDAO instance=new CompanyDAO();
	private String companyInfo="회사정보";
	//private 접근제어자로 외부에서 객체 생성하는 것을 막는다 
	private CompanyDAO() {
		System.out.println("CompanyDAO 객체생성");
	}
	//public static 메서드로 외부에 공유 
	public static CompanyDAO getInstance() {
		return instance;
	}
	public String getCompanyInfo() {
		return companyInfo;
	}
    }		
    -------------------------
    위의 Singleton Design Pattern 이 적용된 클래스를 사용하는 코드 
    System.out.println(CompanyDAO.getInstance().getCompanyInfo());										 
    
*******************************************************************
 webstudy17-mvc-session
 
 - jsp 에서 세션 사용 
   : jsp는 기본적으로 session을 사용할 수 있다 
     web container에 의해 jsp 가 java로 생성될 때 session 변수에 getSession() 메서드를 이용해 세션 객체를 할당하는 
     코드가 생성되어 있다 ( getSession() 메서드는 기존 세션이 존재하면 기존 세션을 반환하고 기존 세션이 존재하지 않으면
     새로 생성해서 할당 ) 
     그러므로 회원 인증시 ( 로그인 )에는 세션에 인증정보( 주로 회원객체 )를 할당해서 
     이후 회원 인증 여부 ( 로그인 체크 ) 를 확인할 때는 
     세션 유무와 함께 로그인시 할당한 인증정보가 존재하는 지를 함께 확인해야 한다  
     
 - model2 mvc 에서 Servlet과 JSP에서 세션을 사용 : mvc-login.jsp와 LoginServlet에서 확인 
 
 mvc-login.jsp ------- LoginServlet 
								|  아이디와 패스워드가 일치하면 세션에 인증정보(회원객체)를 할당한다 
								| 
								| 재동작 안되도록 redirect 이동시킨다  
								|
							login-ok.jsp 		or		 login-fail.jsp 
							아이유님 로그인 			 alert() 로그인 실패 후 mvc-login.jsp로 이동시킨다 	
    

****************************************************************************
webstudy18-member-usecase-diagram

UML : Unified Modeling Language -> application 분석 설계 

UseCase Diagram : 요구분석을 위한 UML 
					  시스템에 요구되는 기능을 사용자 관점에서 나타낸 다이어그램 

Use Case : 사용자 관점의 기능 단위 ( 서비스 단위 )   ( ex - 도서검색 , 도서대여 , 로그인 ) 					  
Actor : 시스템 외부에 존재하면서 시스템과 상호작용하는 개체 ( ex - 고객, 관리자 ) 					  
					  
<<include>>
기본 Use Case가 실행되기 위해서는 반드시 다른 특정 Use Case의 행위를 포함해야 한다는 것을 의미 
ex)   책대여Use Case -------> 회원인증Use Case 

<<extend>>
Use Case 가 특정 Use Case 에 정의된 행위로 선택적으로 추가 확장 될 수 있다는 것을 나타냄 
ex) 책대여Use Case <------ 부록CD 대여 Use Case 

Generalization 
기능의 추가 관계가 아니라 개념의 일반화로 봐야 한다 
ex) 도서 검색 Use Case 은  신착도서검색 Use Case , 간행물검색 Use Case 의 일반화된 Use Case 이다 

아래 요구사항으로 Use Case Diagram 을 설계해보는 연습을 한다 

- 요구사항 
비로그인 상태에서 회원아이디로 회원정보를 검색할 수 있다 ( 이름 , 주소 ) 
비로그인 상태에서 회원 가입이 가능하다 
회원가입시에는 반드시 아이디 중복확인 과정을 거쳐서 중복된 아이디가 아닐 때 
회원가입이 되도록 한다 
선택적으로 고객이 원할 경우 프로필 사진 업로드가 가능하도록 한다 

회원일 경우에는 로그인 , 로그아웃 기능을 사용할 수 있다 
회원은 주소로 회원 정보를 검색할 수 있다 
회원은 자신의 회원정보를 아이디를 제외한 비밀번호 , 이름 , 주소를 수정할 수 있다 


------------------------
회원관리 시스템 구축(분석,설계,구현)
- 요구분석 : UML 의 Use Case Diagram 
- 설계 : UML의 Class Diagram , ERD  
		  UI 설계 
- 구현 : Use Case 별 업무분담 
		  Use Case 별 구현 순서 :  아이디로 회원조회 -> 로그인 , 로그아웃 -> 주소로 회원리스트조회 -> 회원정보수정 -> 회원가입(아이디 중복확인) 
   
   File List :  Model - MemberVO , MemberDAO 
   				View - css/home.css , index.jsp
   				 ( 비로그인시 : 아이디로 회원조회폼 , 로그인폼 , 회원가입링크    
   				 로그인시: 아이디로 회원조회폼 , 주소로 회원리스트조회폼, 누구님(로그인폼을 대체),로그아웃링크,회원정보수정링크)
   				 
   				 아이디로 회원조회 - findbyid-ok.jsp , findbyid-fail.jsp( alert ) 
   				 로그인 - login-fail.jsp 에서 alert 후 index.jsp로 이동 ,  로그인 성공시에는 바로 index.jsp 
   				 로그아웃 - index.jsp에서 로그인 상태시에 링크 제공 , 로그아웃 성공되면 다시 index.jsp로 이동
   				 주소로 회원리스트조회 - index.jsp , 조회결과 - findbyaddress-result.jsp( table 형식으로 회원아이디, 회원명을 제공 ) 
   				 회원정보수정 - update-form.jsp ( 수정폼 제공 ) , update-result.jsp ( 수정 결과 화면 ) 
   				 회원가입 -  register-form.jsp (회원가입폼 제공 ) , register-result.jsp ( 가입결과 화면 ) , idcheck-ok.jsp( 팝업 ) , idcheck-fail.jsp( 팝업 )  
   				 
   				  
   				Controller - FindMemberByIdServlet , LoginServlet, LogoutServlet , FindMemberListByAddressServlet , UpdateMemberServlet 	
   							   RegisterMemberServlet , IdCheckServlet 	  
		  
아이디로 회원검색 

index.jsp --- FindMemberByIdServlet --- MemberDAO		---------------  Database 
					|							  findMemberById(id): MemberVO 	
					| forward		
					|
					findbyid-ok.jsp or findbyid-fail.jsp					
					
					
로그인 , 로그아웃 
1) 로그인 
index.jsp --- LoginServlet --- MemberDAO  ----------------- Database 					
					|				 login(id,password) : MemberVO
					| redirect
					|		
				 로그인 실패할 경우 login-fail.jsp 에서 로그인 실패 alert 후 index.jsp로 이동 
				 로그인 성공할 경우 index.jsp로 이동 , 로그인 폼 대신 누구님 메세지와 아래 라인에 로그아웃 링크를 보여준다
2) 로그아웃 
index.jsp ---- LogoutServlet
					|
					|로그아웃 처리 후 
					| redirect 
					| 
					index.jsp로 이동 ( 누구님 메세지와 로그아웃 링크 대신 로그인폼을 제공한다 ) 

3) 주소로 회원조회 

index.jsp ------ FindMemberListByAddressServlet ------------ MemberDAO ----------------------  Database 
								|
								| request 객체에 리스트를 할당 			findMemberListByAddress(address) : ArrayList<MemberVO>
								| forward 		
								|								
					    findbyaddress-result.jsp

4) 회원정보수정 
index.jsp ---- update-form.jsp ------ UpdateMemberServlet -------  MemberDAO 
																					  update(MemberVO) 
												doPost() 
												MemberDAO를 이용해 DB에 회원정보를 수정 
												세션에 저장된 회원정보를 업데이트 
												|
												| redirect 
												update-result.jsp 
												Home
												회원정보 수정완료

												아이디: java
												이름: 어이유
												주소: 오리

					<input type="text" name="id" readonly="readonly" value="세션에 저장된 회원아이디">
					<%-- readonly는 수정불가,읽기전용  --%>

5) 회원가입 
	
	index.jsp --- register-form.jsp 	-------------- RegisterMemberServlet ---- MemberDAO				-- DB
					비밀번호와 																	register(MemberVO)
					비밀번호 확인란을 입력하게 해					doPost()
					일치할 때 가입하게 한다 						|
																	| redirect
																	|
																    register-result.jsp
																    ( 회원가입을 축하합니다 ) 	


6) 아이디 중복확인 
index.jsp -- register-form.jsp --중복확인버튼누르면--  IdCheckServlet ---  MemberDAO 													---- DB 
																						idcheck(id) : boolean ( 존재하면 true , 존재하지 않으면 false )  		
																	|
																	| forward 
																	|
																	|
				 												   false 사용가능일 때는 idcheck-ok.jsp 에서 팝업으로 응답 
				 												   true 사용불가일 때는 idcheck-fail.jsp에서 팝업으로 응답 
				 	
********************************************************
webstudy19-front-controller-pattern-step1

- Front Controller Design Pattern 
 모든 클라이언트의 요청을 하나의 진입점(FrontController)으로 통합하여 처리하는 디자인 패턴 
 
 웹 어플리케이션 서비스의 공통 정책을 일관성 있게 효과적으로 처리할 수 있다 
 ( 공통 정책 : 보안(인증,인가) , 예외처리 , 인코딩 , 데이터수집 등 ) 
 
 기존 MVC 구조 
 client 1 --- FindMemberByIdServlet --- Model 
 client 2 --- RegisterMemberServlet  --- Model 
 
 - FrontController Pattern 적용시 
 client 1 --검색요청-- FrontControllerServlet -- Model 
 client 2 --등록요청--
 client 3 --수정요청 -- 
 
 모든 클라이언트의 다양한 요청을 하나의 FrontControllerServlet 이 통합하여 처리한다                            
 
 다양한 클라이언트의 요청을 하나의 진입점인 FrontControllerServlet이 구분하기 위해서는 hidden tag를 이용해서 
 클라이언트 요청시 form 내부에<input type="hidden" name="command" value="findCarByNo"> 와 같이 할당해서 전송한다
 또한 query string 방식으로 FrontControllerServlet?command=findCarByNo 와 같은 형식도 가능하다  
 
 
 FrontControllerServlet 의 doDispatch(request,response) 메서드를 정의하여 get 방식 , post 방식 요청을 처리 
 -> 생각해 볼 점 : doDispatch 메서드의 처리 작업이 많음으로 기능별로 메서드를 분할하여 호출해 요청을 처리하는 방식으로 구조를 개선
 	 변경 전 
 	 doDispatch(){
    	if(){
    		//차번호 조회 로직 
    	}else if(){
    		//제조사 차 조회 로직 
    	}else if(){
    		//차 등록 로직  
    	}
    } 
    
    변경 후 ( 메서드 별로 업무를 분할하여 호출 ) 
 
    doDispatch(){
    	if(){
    		findCarByNo();
    	}else if(){
    		findCarListByMaker();
    	}else if(){
    		registerCar(); 
    	}
    } 
 				
 **************************************************************************
 webstudy19-front-controller-pattern-step2
 
 step1 에서 FrontController Design Pattern 적용시 생각해 볼 점 
 --> FrontControllerServlet 에서 doDispatch() 및 컨트롤러 로직 메서드 ( findCarByNo() , registerCar() ) 를
      정의해서 요청을 처리 
      문제제기 -> 하나의 FrontControllerServlet 에서 모든 요청을 처리하므로 
      				클래스 자체의 업무 및 코드량이 증가하여 이후 생산성 및 유지보수성에 문제가 있다 
 
 step2 에서는 step1 의 컨트롤러 로직 메서드를 별도의 클래스로 분화시켜 작업을 처리하게 변경하도록 설계  
 
 client1--     FrontControllerServlet -- FindCarByNoController : findCar() 
 client2--									   RegisterCarController : register() 
 											   FindCarListByMakerController : findList() 
 
 위의 구조는 FrontControllerServlet이 개별 Controller 객체의 다양한 메서드를 직접 호출해서 사용하는 방식 
 -> FrontControllerServlet 과 개별 Controller 객체는 결합도가 높은 상태 	
 	--> 이런 문제를 해결하여 결합도를 낮추기 위해서는 Controller 객체의 캡슐화 , interface를 이용한 표준화를 적용하면 된다 	
 	
 	컨트롤러 로직을 처리하는 객체는 인터페이스 Controller 를  implements 하도록 설계한다 
 	FrontControllerServlet 은 인터페이스 Controller에서 명시한 추상 메서드 execute() 만 호출하면 모든 컨트롤러 구현체들을 실행할 수 있다 	
 												
 												Controller Interface : execute()
 												
client1--     FrontControllerServlet --  FindCarByNoController : execute() 
 client2--									   RegisterCarController : execute() 
 											   FindCarListByMakerController : execute()  	
 	
 	
  **************************************************************************
 webstudy19-front-controller-pattern-step3	
 	
 FrontControllerServlet
  	
 ver1 : doDispatch() 메서드에서 모든 요청을 처리 
 
 ver2 : 개별 요청 처리를 별도의 메서드로 분화 
 		 findCarByNo() , registerCar() 
 		 doDispatch() 메서드에서 호출해서 이용 
 		 
 ver3 : 개별 요청 처리를 별도의 클래스에서 담당 	
 		 별도의 클래스를 표준화 , 캡슐화 하기 위해 인터페이스를 설계 
 		 FrontControllerServlet은 표준화된 인터페이스의 추상메서드를 호출하여 
 		 개별 컨트롤러 로직을 정의한 객체를 실행
 		 
 		 client --- FrontControllerServlet -- Controller Interface
 		 												|						|
 		 												FindCarController 	RegisterCarController 
 		 												
 	webstudy20-front-controller-pattern-step3 에서는 step2 까지 설계 구현한 내용을 
 	다시 한번 구현
 	
  **************************************************************************
  
  webstudy20-front-controller-pattern-step4
  
  기존의 step3 구조 
  
   client --- FrontControllerServlet -- Controller Interface
 		 												|						|
 		 												FindCarController 	RegisterCarController 
 		 												
 	개선점 : 만약 서비스가 추가되거나 변경되어야 한다면 
 			  FrontControllerServlet의 컨트롤러 객체 생성부는 추가되거나 변경되어야 한다
 			  FrontControllerServlet 과 컨트롤러 객체의 결합도는 높은 상태 
 			  -> 이를 해결하기 위해 컨트롤러 객체 생성을 전담하는 HandlerMapping을 정의한다   	 												
 		 												
 	step4
		client --- FrontControllerServlet----HandlerMapping -- Controller Interface
		 		 																|						|
		 		 														FindCarController 	RegisterCarController 
		컨트롤러 영역의 요소 
		FrontControllerServlet : 모든 클라이언트의 요청을 통합하는 진입점의 역할을 하는 서블릿 
		
		HandlerMapping : 개별 컨트롤러 구현체들의 생성을 전담하는 객체 ( Factory ) 
							 ( spring framework 에서도 이런 역할을 하는 객체를 HandlerMapping 이라고 말한다 ) 
							 
		Controller Interface : 컨트롤러 구현체들의 상위 인터페이스 , 캡슐화 , 표준화 , 다형성 지원 	
		
		개별 Controller 구현체 : 실제 클라이언트의 요청을 처리하는 객체 				  		 															 												
 		 												
 	step5
 		step4 에서 HandlerMapping을 추가하여 컨트롤러 객체 생성을 전담시켰다 
 		개선점 : 이후 서비스가 확장되어 컨트롤러가 추가될 경우 매번 HandlerMapping의 create 메서드의 
 				  객체 생성하는 부분의 코드가 변경(추가)되어야 한다  
 				  -> Reflection API 를 이용해 컨트롤러 객체 생성을 런타임시에 자동화 시키도록 프로그램을 업데이트한다
 		
 		Reflection : 런타임 시점에 동적으로 객체를 제어 ( 지금은 동적으로 객체를 생성하는 것으로 사용 )		  
 		테스트 예제 -> test.reflection.TestAutoCreateInstance 에서 확인한 후 HandlerMapping에 반영		   
 		
 client --- FrontControllerServlet --- HandlerMapping --- Controller Interface 
 																		|							|
 																FindCustomerByIdController   RegisterCustomerController
 		
 	*******************************************************************************************************
 	webstudy22-front-controller-pattern-step6
 																	 												
 	step6   *.do 스타일로 변경 
 	
 	step5까지의 command를  컨트롤러명.do 의 요청 스타일로 변경하면 조금 더 간결한 방식으로 요청할 수 있다는 장점이 있음 
 	예)  <form action="FindCustomerByIdController.do"> 
 	별도의 hidden tag 나 query string을 명시하지 않고도 command를 서버에 전달할 수 있음 
 	
 	client에서 .do 스타일로 요청하고 FrontControllerServlet에서 요청을 처리하는 방식에 대한 공부와 단위테스트는
 	별도의 프로젝트에서 해본다 ( webstudy22-front-do-unit-test ) 
 	-> 이에 기반해  현재 프로젝트(webstudy22-front-controller-pattern-step6)를 *.do 스타일로 변경해본다 
 	
 	
 	
 	기존 step5 
 	클라이언트의 요청시 command를 hidden tag 또는 query string 방식으로 전달 
 	-> 서버로 전송하는 command가 실제 컨트롤러명이 되는 구조 
 	
 	예 1) 	 form 전송시 											
 	<form action="FrontControllerServlet">
 	<input type="hidden" name="command" value="FindCustomerByIdController">
 	...
 	</form>	
 	예 2)   링크를 이용한 요청시 
 	<a href="FrontControllerServlet?command=FindCustomerByIdController&id=java">...</a>
 	
***********************************************
webstudy23- date

	MVC + Front Controller Design Pattern 상에서 Database 의 date형을 이용
	SQL 함수  : to_char()와 to_date() 함수를 학습하고 적용
	
	링크 부여시에 컨트롤러 url과 query string 이용해서 상품 상세 컨트롤러로 동작되도록 명시
	<a href="FindProductByIdController.do?productId=<%=list.get(i).getId()%>"><%=list.get(i).getName()%>		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
  
  
  
  
  
  
  
  
  
  
  
   												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 												
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 	 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 
 		 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 									   
 											   
 											   
 											   
 											   
 											   
 											   
 											   
 											   	
 
 
 
 
 
 
 
 
 
 
 
 


































					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  
					  

































 





				  



































